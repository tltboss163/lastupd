import datetime
import logging
from db_manager import (add_expense, get_group_members, get_user_debt_summary, 
                       create_transaction, update_transaction_status, 
                       get_transaction, get_user_debts)

# Configure logging
logger = logging.getLogger(__name__)

def handle_new_expense(group_id, amount, description, admin_id, file_id=None, participants=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª–≥–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        amount = float(amount)
        if amount <= 0:
            return False, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        expense_id = add_expense(group_id, amount, description, admin_id, file_id, participants)
        
        if expense_id:
            return True, expense_id
        else:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def calculate_individual_debt(amount, group_id, admin_id):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –∑–∞ —Ä–∞—Å—Ö–æ–¥."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã (–∫—Ä–æ–º–µ –±–æ—Ç–æ–≤)
        members = get_group_members(group_id, exclude_bots=True)
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ä–∞—Å—Ö–æ–¥–∞ –∏–∑ —Ä–∞—Å—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω –≤ –≥—Ä—É–ø–ø–µ
        members = [m for m in members if m['user_id'] != admin_id]
        
        if not members:
            return 0, []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—É–º–º—É
        individual_amount = amount / len(members)
        
        return individual_amount, [m['user_id'] for m in members]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞: {e}")
        return 0, []

def get_user_total_debt(user_id, group_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –¥–æ–ª–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ."""
    try:
        return get_user_debt_summary(user_id, group_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –¥–æ–ª–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return 0

def get_user_detailed_debts(user_id, group_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ."""
    try:
        debts = get_user_debts(user_id, group_id)
        return debts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []

def handle_money_transfer(group_id, sender_id, receiver_id, amount):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        amount = float(amount)
        if amount <= 0:
            return False, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
        
        # –°–æ–∑–¥–∞–µ–º –æ–∂–∏–¥–∞—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_id = create_transaction(group_id, sender_id, receiver_id, amount)
        
        if transaction_id:
            return True, transaction_id
        else:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"
    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def confirm_transaction(transaction_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ–ª–≥–∏."""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
        success = update_transaction_status(transaction_id, 'confirmed')
        
        if success:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_transaction_status
            return True, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        else:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def reject_transaction(transaction_id):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é."""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        success = update_transaction_status(transaction_id, 'rejected')
        
        if success:
            return True, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        else:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def format_debt_message(user_id, group_id):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–ª–≥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    total_debt = get_user_total_debt(user_id, group_id)
    detailed_debts = get_user_detailed_debts(user_id, group_id)
    
    if total_debt <= 0 and not detailed_debts:
        return "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ! üéâ"
    
    message = f"üí∞ *–í–∞—à –æ–±—â–∏–π –¥–æ–ª–≥:* {total_debt:.2f} —Ä—É–±.\n\n"
    
    if detailed_debts:
        message += "*–î–µ—Ç–∞–ª–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º:*\n"
        for debt in detailed_debts:
            date_str = datetime.datetime.fromisoformat(debt['date']).strftime('%d.%m.%Y')
            message += f"- {debt['description']}: {debt['amount']:.2f} —Ä—É–±. ({date_str})\n"
    
    return message
